{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Decide repo layout and initialise workspace",
        "description": "Create a monorepo with apps (studio) and packages (schema, renderer, exporter, ai, utils).",
        "status": "completed",
        "priority": "high",
        "details": "Use pnpm + Turborepo (or npm workspaces) for speed. Structure:\n- apps/studio (Next.js or Remix)\n- packages/schema (TypeScript types + Zod)\n- packages/renderer (Nunjucks server-side renderer for preview)\n- packages/exporter-prototype-kit (codegen → Express app per GOV.UK Prototype Kit)\n- packages/ai (prompt templates + guards)\n- packages/utils (shared helpers)\nInit repo, CI (GitHub Actions), EditorConfig, Prettier/ESLint.",
        "testStrategy": "CI passes; workspace bootstraps; root readme explains workspace commands."
      },
      {
        "id": 2,
        "title": "Wire up Task Master + Cursor workflow",
        "description": "Add Task Master CLI/MCP to make Cursor follow this plan.",
        "status": "pending",
        "dependencies": [1],
        "priority": "high",
        "details": "Add task-master to devDependencies or install globally. Check in scripts/ with helper commands:\n- scripts/parse-prd.sh → `task-master parse-prd scripts/prd.md`\n- scripts/next.sh → `task-master next`\nAdd .cursorrules with: \"Always consult tasks.json; never skip dependencies; confirm acceptance criteria before implementing.\"",
        "testStrategy": "Run `task-master next` and see a usable task surfaced with deps resolved."
      },
      {
        "id": 3,
        "title": "Define domain schema for projects, pages, fields, conditions",
        "description": "Single source of truth for the builder, preview, and exporter.",
        "status": "completed",
        "dependencies": [1],
        "priority": "high",
        "details": "In packages/schema:\n- Project {id, name, govukFrontendVersion, pages[], settings}\n- Page {id, key, type, path, title, fields[], next[], conditions[], metadata}\n- Field {id, name, type, label, hint, options[], validation}\n- Condition {id, expression(JSONLogic), toPageId}\n- DataModel {answers shape}\nImplement Zod schemas + TypeScript types.\nUse JSONLogic for portable condition expressions.",
        "testStrategy": "Zod validates example project specs; unit tests cover type guards and sample conditions."
      },
      {
        "id": 4,
        "title": "Choose page-type catalogue",
        "description": "Curate supported pages for v1 and map to templates.",
        "status": "completed",
        "dependencies": [3],
        "priority": "high",
        "details": "V1 page types: start, content, question (text, textarea, radios, checkboxes, date, file), task list, check answers, confirmation. Keep extensible via registry (id → template + field map). Document mapping rules and required props.",
        "testStrategy": "A registry function returns a definition for each page type with required/optional props; unit tests assert completeness."
      },
      {
        "id": 5,
        "title": "Set up studio app (Next.js) with GOV.UK Frontend",
        "description": "Developer UI for point-and-click building.",
        "status": "completed",
        "dependencies": [1, 3, 4],
        "priority": "high",
        "details": "✅ COMPLETED: Next.js app with App Router and Tailwind CSS\n✅ Modern studio interface differentiated from prototype output\n✅ Working pages: Dashboard, Project creation form, Templates gallery\n✅ Form components: Custom radio cards, styled inputs, buttons\n✅ Responsive design with proper spacing and typography\n✅ Integration setup for GOV.UK Design System components\n✅ Fixed React hydration errors and build issues\n\nNext: Build Visual Journey Editor and Page Editor components",
        "testStrategy": "✅ Studio loads on clean port with modern styling\n✅ Create new project form works with validation\n✅ Templates page shows component categories\n✅ No console errors or build warnings"
      },
      {
        "id": 6,
        "title": "Nunjucks rendering package for preview",
        "description": "Server-side preview rendering using Nunjucks + GOV.UK macros.",
        "status": "pending",
        "dependencies": [3, 4, 5],
        "priority": "high",
        "details": "packages/renderer: Configure Nunjucks env; register GOV.UK Frontend templates.\nImplement renderPage(page, project, answers) → HTML. Handle macros for radios/checkboxes, errors summary, etc.",
        "testStrategy": "Snapshot tests for each page type. Preview page returns 200 with expected HTML shell."
      },
      {
        "id": 7,
        "title": "Condition Builder UX",
        "description": "Friendly UI to create branching without code.",
        "status": "pending",
        "dependencies": [5, 3],
        "priority": "high",
        "details": "Create a visual rule builder: field/answer selectors → JSONLogic AST. Support equals, contains, greater/less, any/all. Provide real-time evaluation against sample answers.",
        "testStrategy": "Given sample answers, conditions evaluate identically in UI and in server evaluation tests."
      },
      {
        "id": 8,
        "title": "Project storage & versioning",
        "description": "Save projects to disk as JSON with migrations.",
        "status": "pending",
        "dependencies": [3, 5],
        "priority": "medium",
        "details": "Implement persist/load at `projects/{slug}/project.json` plus assets. Add schema version; write migration utility. Optional: Git integration (commit on save).",
        "testStrategy": "Round-trip save/load preserves project equality; migration upgrades old examples."
      },
      {
        "id": 9,
        "title": "AI content assistant (LLM) for page scaffolding",
        "description": "Generate page copy, labels, validation, and suggested journeys.",
        "status": "pending",
        "dependencies": [5, 3, 4],
        "priority": "medium",
        "details": "packages/ai: Prompt templates that accept service intent and user constraints; produce structured JSON matching schema.\nSafety: never overwrite without confirm; diff view.\nAdd actions: \"Draft page\", \"Suggest fields\", \"Improve microcopy\", \"Accessibility review\".",
        "testStrategy": "Golden tests: prompts produce parseable JSON matching Zod; E2E: create a 3-page flow from one sentence."
      },
      {
        "id": 10,
        "title": "Exporter: scaffold Prototype Kit project",
        "description": "Generate a runnable Express app in the GOV.UK Prototype Kit style.",
        "status": "pending",
        "dependencies": [3, 4, 6, 7, 8],
        "priority": "high",
        "details": "packages/exporter-prototype-kit:\n- Create folder with package.json, `app/assets`, `app/views`, `app/routes.js`, `.gitignore`, `README.md`.\n- Include govuk-frontend as dependency.\n- Provide npm scripts: dev/start.\nFollow official structure: views in `app/views`, branching logic in `app/routes.js`. :contentReference[oaicite:3]{index=3}",
        "testStrategy": "Export a sample; run `npm run dev`; app boots at :3000 and renders `start.html`."
      },
      {
        "id": 11,
        "title": "Views codegen: Nunjucks templates per page",
        "description": "Emit `app/views/*.html` using GOV.UK macros.",
        "status": "pending",
        "dependencies": [10],
        "priority": "high",
        "details": "For each page type generate template with `{% extends 'layouts/main.html' %}` and `{% from 'govuk/components/*' import %}`. Forms have names aligned to field `name`. Include error summary when validation fails.",
        "testStrategy": "Lint generated HTML; open in the exported kit and confirm components render and POSTs work."
      },
      {
        "id": 12,
        "title": "Routes codegen: branching + session data",
        "description": "Emit `app/routes.js` to read `request.session.data` and redirect based on JSONLogic.",
        "status": "pending",
        "dependencies": [10, 7, 3],
        "priority": "high",
        "details": "Generate GET for each path to render view, POST handlers to persist answers into `request.session.data[fieldName]` then evaluate condition graph to pick next route. Use the kit’s example style. :contentReference[oaicite:4]{index=4}",
        "testStrategy": "Automated route tests: post answers and expect redirects to computed next pages across branches."
      },
      {
        "id": 13,
        "title": "Validation mapping",
        "description": "Translate schema validation rules to server-side checks + error states.",
        "status": "pending",
        "dependencies": [11, 12, 3],
        "priority": "medium",
        "details": "Support required, pattern, min/max length, number bounds, date validity. On failure, re-render the same view with error summary + field-level errors (per GOV.UK guidance).",
        "testStrategy": "For each rule: failing submissions show errors; success proceeds; snapshots verify error markup."
      },
      {
        "id": 14,
        "title": "Check answers page generator",
        "description": "Emit a summary list page and per-answer change links.",
        "status": "pending",
        "dependencies": [11, 12],
        "priority": "medium",
        "details": "Build page listing questions/answers using Summary list component; change link routes back to the relevant page with query to show change mode.",
        "testStrategy": "E2E: complete flow, check answers, change an answer, return and see updated summary."
      },
      {
        "id": 15,
        "title": "Task list page generator (optional v1)",
        "description": "Emit a simple task list linking to sections/subflows.",
        "status": "pending",
        "dependencies": [11, 12, 4],
        "priority": "low",
        "details": "Support sections with status: not started / in progress / complete (based on answers).",
        "testStrategy": "Statuses update as pages completed; navigation works."
      },
      {
        "id": 16,
        "title": "Studio → Export UX",
        "description": "Add Export dialog: choose zip or folder, kit version notes.",
        "status": "pending",
        "dependencies": [10, 11, 12],
        "priority": "medium",
        "details": "Server action zips export into download. Include README with how to `npx govuk-prototype-kit@latest create` vs using generated project directly; note Node 22 LTS requirement. :contentReference[oaicite:5]{index=5}",
        "testStrategy": "Download zip; `npm i && npm run dev` succeeds; smoke test journey."
      },
      {
        "id": 17,
        "title": "Accessibility checks in preview",
        "description": "Run axe-core on rendered preview and surface issues inline.",
        "status": "pending",
        "dependencies": [6, 5],
        "priority": "medium",
        "details": "Add a11y panel showing severity, node, fix hints. Provide AI “rewrite for accessibility” suggestion for copy issues.",
        "testStrategy": "Known a11y violation triggers visible issue; fix clears it."
      },
      {
        "id": 18,
        "title": "E2E tests: build → export → run",
        "description": "Playwright tests covering a branched journey from studio to exported kit.",
        "status": "pending",
        "dependencies": [16, 12, 13, 14],
        "priority": "high",
        "details": "Script: create project JSON, open studio, export, run the kit, follow journey, assert branching and validation.",
        "testStrategy": "CI green on Linux/Windows/macOS; flake rate <1% across 10 runs."
      },
      {
        "id": 19,
        "title": "Content authoring inputs",
        "description": "Rich text/markdown fields for content pages, with sanitisation.",
        "status": "pending",
        "dependencies": [5],
        "priority": "low",
        "details": "Support basic formatting and component embeds (callouts). Sanitize on save; render via Nunjucks safe filters.",
        "testStrategy": "XSS-strings are escaped; allowed formatting renders."
      },
      {
        "id": 20,
        "title": "Asset handling",
        "description": "Upload and reference images/files; copy to export.",
        "status": "pending",
        "dependencies": [8, 10],
        "priority": "low",
        "details": "Store under projects/{slug}/assets; map to `/public` in exported kit; update views to reference paths.",
        "testStrategy": "Uploaded image appears in preview and works after export."
      },
      {
        "id": 21,
        "title": "Import existing Prototype Kit (stretch)",
        "description": "Parse an existing kit’s views/routes into a project JSON.",
        "status": "pending",
        "dependencies": [3, 11, 12],
        "priority": "low",
        "details": "Heuristics to map common macros and `routes.js` branching to schema; warn for unsupported constructs.",
        "testStrategy": "Import a simple kit project; round-trip export diff is minimal."
      },
      {
        "id": 22,
        "title": "Documentation & examples",
        "description": "Write how-tos and include sample projects.",
        "status": "pending",
        "dependencies": [16, 18],
        "priority": "medium",
        "details": "Docs in /docs with screenshots/GIFs. Include sample: eligibility flow with radios branching, check answers, confirmation.",
        "testStrategy": "A newcomer follows docs to build and export a working prototype in <20 minutes."
      }
    ],
    "metadata": {
      "created": "2025-08-23T14:25:38.753Z",
      "updated": "2025-08-23T17:45:00.000Z",
      "description": "Tasks for master context",
      "lastSession": {
        "date": "2025-08-23",
        "achievements": [
          "✅ Built complete Next.js studio app with modern design",
          "✅ Implemented Tailwind CSS styling system",
          "✅ Created responsive forms with custom components",
          "✅ Added Templates gallery for GOV.UK components",
          "✅ Fixed all React hydration and build errors",
          "✅ Set up proper integration with design system",
          "✅ Differentiated studio UI from prototype output"
        ],
        "nextPriority": "Task 6: Nunjucks rendering for live preview functionality"
      }
    }
  }
}
